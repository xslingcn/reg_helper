name: Rust

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          # - os: ubuntu-latest
          #   target: aarch64-unknown-linux-gnu
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          # - os: windows-latest
          #   target: aarch64-pc-windows-msvc
          - os: macos-latest
            target: aarch64-apple-darwin
          - os: macos-latest
            target: x86_64-apple-darwin

    steps:
    - uses: actions/checkout@v4

    # - name: Install aarch64 GCC (aarch64-linux)
    #   if: matrix.target == 'aarch64-unknown-linux-gnu'
    #   run: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu

    - name: Install Rust target
      run: rustup target add ${{ matrix.target }}

    # - name: Set Rust toolchain (aarch64-Windows)
    #   if: matrix.target == 'aarch64-pc-windows-msvc'
    #   run: rustup override set stable-msvc

    - name: Build
      run: cargo build --release --target=${{ matrix.target }} --verbose

    - name: Set SHORT_SHA (Windows)
      if: matrix.os == 'windows-latest'
      shell: pwsh
      run: echo "SHORT_SHA=$("${{ github.sha }}".SubString(0, 8))" >> $env:GITHUB_ENV

    - name: Set SHORT_SHA (Linux & MacOS)
      if: matrix.os != 'windows-latest'
      shell: bash
      run: echo "SHORT_SHA=$(echo ${GITHUB_SHA} | cut -c1-8)" >> $GITHUB_ENV

    - name: Move artifact
      run: |
        mkdir -p artifacts
        cp target/${{ matrix.target }}/release/reg_helper${{ matrix.os == 'windows-latest' && '.exe' || '' }} artifacts/
        cp src/config.toml artifacts/

    - name: Upload binary
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.target }}-${{ env.SHORT_SHA }}.gz
        path: artifacts/*
        if-no-files-found: error
